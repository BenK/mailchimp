<?php
// $Id: mailchimp.module,v 1.2.2.1.2.3.2.8.2.46 2010/02/02 21:53:01 loubabe Exp $

/**
 * @file
 * Mailchimp module.
 */

define('MAILCHIMP_LISTTYPE_REQUIRED', 'required');
define('MAILCHIMP_LISTTYPE_OPTIN', 'optin');
define('MAILCHIMP_LISTTYPE_OPTOUT', 'optout');

/**
 * Implementation of hook_user
 *
 * Required lists are updated on insert, update, and delete.
 * The list form fields are added to the registration and profile forms
 */
function mailchimp_user($op, &$edit, &$account, $category = NULL) {
  // include the form in the user registration
  if ($op == 'register' && variable_get('mailchimp_user_register', TRUE)){
    // wrap in a fieldset
    $form['mailchimp_lists'] = array(
      '#type' => 'fieldset',
      '#title' => t('Newsletters')
    );
    $form['mailchimp_lists'][] = mailchimp_subscribe_auth_form(NULL, $account);
    return $form;
  }

  if (in_array($op, array('insert', 'delete', 'update'))) {
    $q = _mailchimp_get_api_object();
    foreach ((array)_mailchimp_get_required_lists() as $list) {
      switch ($op) {
      // delete a user from MC list
        case "delete":
          $ret = _mailchimp_unsubscribe_user($list, $account->mail, FALSE, $q);
          break;
        // insert or update a user to/in a MC list
        case 'insert':
        case 'update':
        // don't repeat if already managing via cron
          if (!variable_get('mailchimp_cron', FALSE) ) {
            // determine if a user is allowed in a given list
            $is_allowed = FALSE;
            $roles = $edit['roles'];
            if (!is_array($roles)) {
              $roles = $account->roles;
            }
            foreach($list->roles as $key=>$value){
              if(array_key_exists($key, $roles)){
                $is_allowed = TRUE;
                break;
              }
            }

            // they are allowed, update or subscribe
            if($is_allowed){
              $userinfo = _mailchimp_load_user_list_mergevars($account->uid, $list->id, $q->listMergeVars($list->id));
              $userinfo['EMAIL'] = $edit['mail'];
              $ret = _mailchimp_subscribe_user($list, $account->mail, $userinfo, FALSE, $q);
            }
            // remove from list
            else{
              $ret = _mailchimp_unsubscribe_user($list, $account->mail, FALSE, $q);
            }
          }
          break;
      }

      if ($ret) {
        watchdog('mailchimp', 'MailChimp: %email updated in list %list on action %action',
            array('%email' => $account->mail, '%list' => $list->name, '%action' => $op), WATCHDOG_NOTICE);
      }
      else {
        watchdog('mailchimp', $q->errorMessage, array(), WATCHDOG_ERROR);
      }
    }
  }
}

/**
 * Add mailchimp form fields to account and registration forms
 */
function mailchimp_subscribe_auth_form($form_state, $account) {
  $form = array();

  if ($q = _mailchimp_get_api_object()) {
    if ($account->uid) {
      $form['uid'] = array(
        '#type' => 'hidden',
        '#value' => $account->uid
      );
    }
    else {
      // user registration or admin creating new user
      $account->roles = array(2 => 'authenticated');
    }

    foreach (_mailchimp_get_available_lists($account) as $list) {
      $is_subscribed = FALSE;

      // ignore required lists, handled by hook_user
      if ($list->listtype !== MAILCHIMP_LISTTYPE_REQUIRED) {
        if ($account->uid) {
          $memberinfo = $q->listMemberInfo($list->id, $account->mail);
          $is_subscribed = $memberinfo['status'] == 'subscribed';
          $default_value = $is_subscribed;
        }
        else {
          $default_value = $list->listtype == MAILCHIMP_LISTTYPE_OPTOUT ? TRUE : FALSE;
        }

        // wrap in a div
        $form['wrapper'. $list->id] = array(
          '#prefix' => '<div class="mailchimp-newsletter-wrapper">',
          '#suffix' => '</div>'
        );

        $form['wrapper'. $list->id]['mailchimp_list_'. $list->id] = array(
            '#type'           => 'checkbox',
            '#title'          => t('Subscribe to the @newsletter newsletter', array('@newsletter' => $list->name)),
            '#default_value'  => $default_value,
            '#description'    => $list->description,
            '#attributes'     => array('class' => 'mailchimp-newsletter-checkbox-' . $list->id)
        );

        // present interest groups
        if (variable_get('mailchimp_interest_groups_user_forms', FALSE)) {
          if ($intgroup = $q->listInterestGroups($list->id)) {
            switch ($intgroup['form_field']) {
              case 'radio':
                $field_type = 'radios';
                break;
              case 'checkbox':
                $field_type = 'checkboxes';
                break;
              default:
                $field_type = $intgroup['form_field'];
            }
            $options = array();
            foreach ((array)$intgroup['groups'] as $group) {
              $options[$group] = $group;
            }
            $form['wrapper'. $list->id]['mailchimp_list_'. $list->id .'_INTERESTS'] = array(
              '#type'           => $field_type,
              '#title'          => $intgroup['name'],
              '#options'        => $options,
              '#default_value'  => $is_subscribed ? explode(",", str_replace(', ', ',', $memberinfo['merges']['INTERESTS'])) : array(),
              '#attributes'     => array('class' => 'mailchimp-newsletter-interests-' . $list->id)
            );
            drupal_add_js('$(document).ready(function(){
              if($(".mailchimp-newsletter-checkbox-'. $list->id .'").attr("checked")){
                $(".mailchimp-newsletter-interests-'. $list->id .'").parent(".form-item").show();
              } else {
                $(".mailchimp-newsletter-interests-'. $list->id .'").parent(".form-item").hide();
              }
              $(".mailchimp-newsletter-checkbox-'. $list->id .'").click(function(){ $(".mailchimp-newsletter-interests-'. $list->id .'").parent(".form-item").toggle("slow");});
            });', 'inline');
          }
        }
      }
    }

    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('save settings'),
      '#weight' => 100
    );
  }

  return $form;
}

/**
 * Implementation of hook_form_alter
 *
 * Add a submit handler to registration and profile forms. Doing this in hook_user breaks user updates
 */
function mailchimp_form_alter(&$form, $form_state, $form_id){
  if($form_id == 'user_register'){
    if(variable_get('mailchimp_user_register', TRUE)){
      // need to set this here as the submit handler doesn't get triggered in hook_user
      $form['#submit'][] = 'mailchimp_subscribe_auth_form_submit';
    }
  }
}

/**
 * Submit handler to add users to lists when editing/creating a user
 */
function mailchimp_subscribe_auth_form_submit($form, &$form_state) {
  if ($q = _mailchimp_get_api_object()) {
    $account = new stdClass();
    if ($form_state['values']['uid']) {
      $account = user_load(array('uid' => $form_state['values']['uid']));
    }
    else {
      $account = $form_state['user'];
    }

    $lists = _mailchimp_get_available_lists($account);
    foreach ($lists as $list) {
    // ignore required lists, they are handled via hook_user
      if ($list->listtype !== MAILCHIMP_LISTTYPE_REQUIRED) {
        $is_subscribed = _mailchimp_is_subscribed($list->id, $account->mail, $q);
        $ret = TRUE;
        $selected = @$form_state['values']['mailchimp_list_'. $list->id];

        // unsubscribe a subscribed user who unchecked the box for this newsletter
        if ($is_subscribed && !$selected) {
          $ret = _mailchimp_unsubscribe_user($list, $account->mail, TRUE, $q);
        }
        else if ($selected) {
        // subscribe the user if they are not previously subscribed or update existing subscriptions
          $merge_vars = _mailchimp_load_user_list_mergevars($account->uid, $list->id, $q->listMergeVars($list->id));
          $merge_vars['EMAIL'] = $form_state['values']['mail'];
          if (!empty($form_state['values']['mailchimp_list_'. $list->id .'_INTERESTS'])){
            $merge_vars['INTERESTS'] = implode(',', array_filter($form_state['values']['mailchimp_list_'. $list->id .'_INTERESTS']));
          }
          $ret = _mailchimp_subscribe_user($list, $account->mail, $merge_vars, TRUE, $q);
        }

        if (!$ret) {
          watchdog('mailchimp', $q->errorMessage, array(), WATCHDOG_ERROR);
        }
      }
    }
  }
}

/**
 * Implementation of hook_cron.
 *
 * Resubscribes all users to the required lists if the user has chosen to do so.
 */
function mailchimp_cron() {
  if (variable_get('mailchimp_cron', FALSE) && $q = _mailchimp_get_api_object()) {
    $result = db_query('SELECT uid FROM {users} where status = %d', 1);

    if ($result) {
      $lists = _mailchimp_get_required_lists();
      foreach ($lists as $key => $list) {
        $lists[$key]->batch      = array();
        $lists[$key]->mergevars  = $q->listMergeVars($list->id);
      }
      while ($row = db_fetch_object($result)) {
        $account = user_load(array('uid' => $row->uid));
        foreach ((array)$lists as $key => $list) {
          foreach ((array)$account->roles as $rid => $info) {
            if ($list->roles[$rid]) {
              $lists[$key]->batch[] = _mailchimp_load_user_list_mergevars($row->uid, $list->id, $lists[$key]->mergevars);
              break;
            }
          }
        }
      }

      $count = 0;
      foreach ($lists as $key => $list) {
        if (count($lists[$key]->batch)) {
          $ret = $q->listBatchSubscribe($list->id, $lists[$key]->batch, FALSE, TRUE);

          if ($ret['error_count'] > 0) {
            foreach ((array)$ret['errors'] as $error) {
              watchdog('mailchimp', $error['email_address'] .': '. $error['message'], array(), WATCHDOG_ERROR);
            }
          }
        }
        $count += $ret['success_count'];
      }

      watchdog('mailchimp', 'Updated !count records in MailChimp', array('!count' => $count), WATCHDOG_NOTICE);
    }
  }
}

/**
 * Implementation of hook_menu.
 */
function mailchimp_menu() {
  $items = array();

  $items['user/%user/mailchimp'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mailchimp_subscribe_auth_form', 1),
    'title' => 'Newsletter Subscriptions',
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'mailchimp_user_edit_access',
    'access arguments' => array(1),
    'tab_parent' => 'user/%/edit'
  );

  $items['mailchimp/subscribe'] = array(
      'page callback' => 'mailchimp_subscribe_page',
      'title' => 'Newsletter Subscription' ,
      'type' => MENU_NORMAL_ITEM,
      'access arguments' => array('access content'),
  );
  $items['mailchimp/reset'] = array(
      'page callback' => 'drupal_get_form',
      'page arguments' => array('mailchimp_reset'),
      'type' => MENU_CALLBACK,
      'access arguments' => array('administer site configuration'),
  );
  $items['mailchimp/unsubscribe'] = array(
      'page callback' => 'drupal_get_form',
      'page arguments' => array('mailchimp_unsubscribe_form'),
      'title' => 'Newsletter Unsubscribe' ,
      'type' => MENU_CALLBACK,
      'access callback' => TRUE,
  );
  $items['mailchimp/unsubscribe/success'] = array(
      'page callback' => 'mailchimp_unsubscribe_success',
      'title' => 'Unsubscription Confirmed' ,
      'type' => MENU_CALLBACK,
      'access callback' => TRUE,
  );
  $items['mailchimp/unsubscribe/failure'] = array(
      'page callback' => 'mailchimp_unsubscribe_failure',
      'title' => 'Unsubscription Failed',
      'type' => MENU_CALLBACK,
      'access callback' => TRUE,
  );
  $items['admin/settings/mailchimp'] = array(
      'title' => 'MailChimp',
      'description' => 'Manage MailChimp Settings.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('mailchimp_admin_settings'),
      'access arguments' => array('administer mailchimp'),
      'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

function mailchimp_user_edit_access($user){
  if(variable_get('mailchimp_user_edit', TRUE) && user_edit_access($user)){
    return TRUE;
  }
  else {
    return FALSE;
  }
}
/**
 * Implementation of hook_perm()
 */
function mailchimp_perm() {
  return array('administer mailchimp');
}

/**
 * implementation of hook_reset
 */
function mailchimp_reset() {
  variable_del('mailchimp_username');
  variable_del('mailchimp_password');
  drupal_goto('admin/settings/mailchimp');
}

/**
 * implementation of hook_admin_settings
 * @return <type>
 */
function mailchimp_admin_settings() {
  module_load_include('php', 'mailchimp', 'MCAPI.class');

  $form['mailchimp_account_info'] = array(
      '#type'       => 'fieldset',
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#title'      => 'MailChimp Account Information',
  );

  // only show the list selection forms if account info provided
  $username = variable_get('mailchimp_username', FALSE);
  $password = variable_get('mailchimp_password', FALSE);
  if ($username && $password) {

    $form['mailchimp_account_info']['mailchimp_setup_account'] = array(
        '#value' => t('Current configured account is for: @username.', array('@username' => $username))
    );
    $form['mailchimp_account_info']['reset'] = array(
        '#value' => l('Click here to login as a different user.', 'mailchimp/reset')
    );

    $q = new MCAPI($username, $password);

    if (!$q->errorCode) {
      $lists = $q->lists();
      if (!empty($lists)) {
        $form['mailchimp_lists'] = array(
            '#type'       => 'fieldset',
            '#collapsible' => FALSE,
            '#title'      => 'MailChimp Subscription Lists',
            '#tree'         => TRUE
        );
        foreach ($lists as $list) {
          $saved_list = unserialize(variable_get('mailchimp_lists', NULL));
          $saved_list = $saved_list[$list['id']];

          $form['mailchimp_lists']['mailchimp_list_'. $list['id']] = array(
              '#type'       => 'fieldset',
              '#collapsible' => TRUE,
              '#collapsed' => TRUE,
              '#title'      => $list['name'],
              '#tree'         => TRUE,
          );

          $form['mailchimp_lists']['mailchimp_list_'. $list['id']]['list_id'] = array(
              '#type'       => 'value',
              '#value'      => $list['id'],
          );

          $form['mailchimp_lists']['mailchimp_list_'. $list['id']]['name'] = array(
              '#type'       => 'value',
              '#value'      => $list['name'],
          );

          // Add a row of checkboxes for role enabling.
          $form['mailchimp_lists']['mailchimp_list_'. $list['id']]['roles'] = array(
              '#type'         => 'fieldset',
              '#title'        => t('Roles'),
              '#description'  => t('Choose which roles may subscribe to this list. All users will see the lists they\'re eligble for at the !subscribe and in the subscription block. Lists assigned to the Authenticated role may also apear in the registration form if that option is selected below. Authenticated user may also manage their list settings from their profile.', array('!subscribe' => l(t('newsletter subscription page'), 'mailchimp/subscribe'))),
              '#tree'         => TRUE,
          );

          foreach (user_roles() as $rid => $name) {
            $form['mailchimp_lists']['mailchimp_list_'. $list['id']]['roles'][$rid] = array(
                '#type'           => 'checkbox',
                '#title'          => $name,
                '#default_value'  => $saved_list->roles[$rid],
            );
          }

          $form['mailchimp_lists']['mailchimp_list_'. $list['id']]['description'] = array(
              '#type'           => 'textarea',
              '#title'          => t('List Description'),
              '#default_value'  => $saved_list->description,
              '#description'    => t('This description will be shown to the user on the list signup and user account settings pages')
          );

          $form['mailchimp_lists']['mailchimp_list_'. $list['id']]['listtype'] = array(
              '#type'           => 'select',
              '#title'          => t('Subscription Method'),
              '#options'        => array(MAILCHIMP_LISTTYPE_OPTIN => "Opt-in", MAILCHIMP_LISTTYPE_OPTOUT => 'Opt-out', MAILCHIMP_LISTTYPE_REQUIRED => 'Required'),
              '#default_value'  => ($saved_list->listtype) ?  $saved_list->listtype : MAILCHIMP_LISTTYPE_OPTOUT,
              '#description'    => t('<strong>Opt-in:</strong> Users must sign up to recieve messages.<br/><strong>Opt-out: </strong> Users are automatically signed up but may unsubscribe.<br/><strong>Required: </strong> Users will remain on the list as long as they have an account and cannot unsubscribe.')
          );

          $form['mailchimp_lists']['mailchimp_list_'. $list['id']]['doublein'] = array(
              '#type'           => 'checkbox',
              '#title'          => t('Require subscribers to Double Opt-in'),
              '#default_value'  => $saved_list->doublein,
              '#description'    => t('New subscribers will be sent a link with an email they must follow to confirm their subscription.'),
          );
          $mergevars = $q->listMergeVars($list['id']);
          if ($mergevars) {
          // Merge var fieldset
            $form['mailchimp_lists']['mailchimp_list_'. $list['id']]['mergevars'] = array(
                '#type'         => 'fieldset',
                '#title'        => t('Merge Variables'),
                '#description'  => t('Select Drupal user variables to send to Mailchimp as Merge Variables. Available Drupal variables are any Profile or Token variables for the given user. For more information on Merge Variables, see the !doc', array('!doc' => l(t('Mailchimp Documentation'), 'http://server.iad. liveperson.net/hc/s-31286565/cmd/kbresource/kb-8214439208090042855/view_question!PAGETYPE?sq=merge%2bvariables&sf=101113&sg=0&st=188569&documentid=143258&action=view'))),
                '#tree'         => TRUE,
            );
            $mergeoptions = mailchimp_get_merge_keys();
            foreach ($mergevars as $mergevar) {
              if ($mergevar['tag'] !== 'EMAIL') {
                $form['mailchimp_lists']['mailchimp_list_'. $list['id']]['mergevars'][$mergevar['tag']] = array(
                    '#type'           => 'select',
                    '#title'          => $mergevar['name'],
                    '#options'        => $mergeoptions,
                    '#default_value'  => $saved_list->mergevars[$mergevar['tag']]
                );
              }
            }
          }
        }

        $form['mailchimp_messages'] = array(
            '#type'       => 'fieldset',
            '#collapsible' => TRUE,
            '#collapsed' => TRUE,
            '#title'      => 'Anonymous Lists Messaging',
        );
        $form['mailchimp_messages']['mailchimp_subscription_success_message'] = array(
            '#type'           => 'textarea',
            '#title'          => t('Subscription Success Message'),
            '#default_value'  => variable_get('mailchimp_subscription_success_message', t('Thank you, you have been successfully subscribed.'))
        );
        $form['mailchimp_messages']['mailchimp_subscription_failure_message'] = array(
            '#type'           => 'textarea',
            '#title'          => t('Subscription Failure Message'),
            '#default_value'  => variable_get('mailchimp_subscription_failure_message', t('We were unable to subscribe you at this time. Please try again later.'))
        );
        $form['mailchimp_messages']['mailchimp_unsubscription_success_message'] = array(
            '#type'           => 'textarea',
            '#title'          => t('Unsubscription Success Message'),
            '#default_value'  => variable_get('mailchimp_unsubscription_success_message', t('Thank you, you have been successfully unsubscribed.'))
        );
        $form['mailchimp_messages']['mailchimp_unsubscription_failure_message'] = array(
            '#type'           => 'textarea',
            '#title'          => t('Unsubscription Failure Message'),
            '#default_value'  => variable_get('mailchimp_unsubscription_failure_message', t('We were unable to unsubscribe you at this time. Please try again later.'))
        );

        $form['mailchimp_user_register'] = array(
            '#type'           => 'checkbox',
            '#title'          => t('Show subscription options on the user registration form.'),
            '#description'    => t('This will only apply for lists granted to the authenticated role.'),
            '#default_value'  => variable_get('mailchimp_user_register', TRUE)
        );
        $form['mailchimp_user_edit'] = array(
            '#type'           => 'checkbox',
            '#title'          => t('Show Subscription Options on User Edit Screen'),
            '#description'    => t('If set, a tab will be presented for managing newsletter subscriptions when editing an account.'),
            '#default_value'  => variable_get('mailchimp_user_edit', TRUE)
        );
        $form['mailchimp_cron'] = array(
            '#type'           => 'checkbox',
            '#title'          => t('Sync Required Lists During Cron'),
            '#default_value'  => variable_get('mailchimp_cron', FALSE),
            '#description'    => t('If this is set, users will be subscribed to the required list during cron runs. Otherwise subscription will take place when a user is added/edited.')
        );
        $form['mailchimp_interest_groups_user_forms'] = array(
            '#type'           => 'checkbox',
            '#title'          => t('Show Interest Groups on Registration and Account Forms'),
            '#default_value'  => variable_get('mailchimp_interest_groups_user_forms', FALSE),
            '#description'    => t('If set, users will be able to select applicable interest groups when registering or editing their accounts.')
        );
      }
      else {
        drupal_set_message(t('You do not have any valid MailChimp mailing lists.'));
      }
    }
    else if (FALSE && $q->errorCode === 'INVALID_LOGIN') {
        drupal_set_message(t('Could not login to mailchimp. Please check your username and password.'), "error");
      }
      else if ($q->errorMessage) {
          drupal_set_message(t('Could not retrieve info for mailchimp. The following error was returned: %error.', array('%error' => $q->errorMessage)), "error");
        }
        else {
          drupal_set_message(t('Could not retrieve info for mailchimp for an unknown reason. Please try again later'), "error");
        }
  }
  else {
    $form['mailchimp_account_info']['mailchimp_username'] = array(
        '#type' => 'textfield',
        '#title' => t('Mailchimp username'),
        '#required' => TRUE,
        '#default_value' => variable_get('mailchimp_username', ''),
        '#description' => t('The username used to login to your MailChimp account.')
    );
    $form['mailchimp_account_info']['mailchimp_password'] = array(
        '#type' => 'password',
        '#title' => t('Mailchimp password'),
        '#required' => TRUE,
        '#default_value' => variable_get('mailchimp_password', ''),
        '#description' => t('The password used to login to your MailChimp account.')
    );
  }

  $form['#validate'][] = 'mailchimp_admin_settings_validate';

  return system_settings_form($form);
}

/**
 * validate the admin settings and serialize the saved lists into objects
 *
 * @param <type> $form
 * @param <type> $form_state
 */
function mailchimp_admin_settings_validate($form, &$form_state) {
  // no lists selected or first time here
  if(!is_array($form_state['values']['mailchimp_lists'])){
    return;
  }

  $lists = array();
  foreach ($form_state['values']['mailchimp_lists'] as $form_list) {
    $list = new stdClass();
    $list->id = $form_list['list_id'];
    $list->name = $form_list['name'];
    $list->roles = array_filter($form_list['roles']);
    $list->description = $form_list['description'];
    $list->listtype = $form_list['listtype'];
    $list->doublein = $form_list['doublein'];
    $list->mergevars  = $form_list['mergevars'];
    $lists[$form_list['list_id']] = $list;
  }

  // remove lists from the form_state
  unset($form_state['values']['mailchimp_lists']);
  variable_set('mailchimp_lists', serialize($lists));
}

/**
 * Return all available MC lists a given user can subscribe to
 *
 * @global <type> $user
 * @return <type> page content of all available MC lists for a given user
 */
function mailchimp_subscribe_page(){
  global $user;
  $ret = '';
  if($user->uid){
    $ret = drupal_get_form('mailchimp_subscribe_auth_form', $user);
  }
  elseif ($q = _mailchimp_get_api_object()) {
    $lists =_mailchimp_get_available_lists($user);
    foreach ($lists as $list) {
      $ret .= '<h3 class="mailchimp-newseltter-title">'. $list->name .'</h3>'. drupal_get_form('mailchimp_subscribe_anon_form', $list, $q);
    }
  }
  return $ret;
}

/**
 * Return a form for a given MC list
 *
 * @param <type> $form_state
 * @param <type> $list MC list object
 * @param <type> $q MC object
 * @return <type> form array
 */
function mailchimp_subscribe_anon_form($form_state, $list, $q) {
  $form = array();

  $form['description'] = array(
    '#value' => $list->description
  );

  $form['list'] = array(
      '#type'   => 'value',
      '#value'  => $list
  );

  foreach ((array)$q->listMergeVars($list->id) as $mergevar) {
    $form[$mergevar['tag']] = _mailchimp_insert_drupal_form_tag($mergevar);
  }

  // present interest groups
  if ($intgroup = $q->listInterestGroups($list->id)) {
    switch ($intgroup['form_field']) {
      case 'radio':
        $field_type = 'radios';
        break;
      case 'checkbox':
        $field_type = 'checkboxes';
        break;
      default:
        $field_type = $intgroup['form_field'];
    }
    foreach ((array)$intgroup['groups'] as $group) {
      $options[$group] = $group;
    }
    $form['INTERESTS'] = array(
      '#type'           => $field_type,
      '#title'          => $intgroup['name'],
      '#options'        => $options
    );
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Sign Up!'),
    '#weight' => 100
  );

  return $form;
}

/**
 * Convert mailchimp form elements to Drupal Form API
 *
 * @param <type> $mergevar
 * @return <type>
 */
function _mailchimp_insert_drupal_form_tag($mergevar) {
  // Insert common FormAPI properties
  $input = array(
      '#title' => $mergevar['name'],
      '#weight' => $mergevar['order'],
      '#required' => $mergevar['req'],
      '#default_value' => $mergevar['default']
  );

  switch ($mergevar['field_type']) {
    case 'dropdown':
    // dropdown is mapped to <select> element in Drupal Form API
      $input['#type'] = 'select';

      // Creates options, we must delete array keys to have revealant information
      // on MailChimp
      foreach ($mergevar['choices'] as $choice) {
        $choices[$choice] = $choice;
      }

      $input['#options'] = $choices;
      break;
    case 'radio':
    // radio is mapped to <input type='radio' /> i.e. 'radios' element in Drupal Form API
      $input['#type'] = 'radios';

      // Creates options, we must delete array keys to have revealant information
      // on MailChimp
      foreach ($mergevar['choices'] as $choice) {
        $choices[$choice] = $choice;
      }

      $input['#options'] = $choices;
      break;

    default:
    // This is a standard input[type=text] or something we can't handle with Drupal FormAPI
      $input['#type'] = 'textfield';
      $input['#size'] = $mergevar['size'];
      break;
  }

  // Special cases for MailChimp hidden defined fields
  if ($mergevar['public'] == FALSE) {
    $input['#type'] = 'hidden';
  }

  return $input;
}

/**
 * Submit handler for stand alone form
 *
 * @param <type> $form
 * @param <type> $form_state
 */
function mailchimp_subscribe_anon_form_submit($form, &$form_state) {
  $success = FALSE;

  $values = $form_state['values'];

  // filter our interest groups and return in an comma delimited string
  if (!empty($values['INTERESTS'])) {
    $values['INTERESTS'] = implode(',', array_filter($values['INTERESTS']));
  }

  $success = _mailchimp_subscribe_user($values['list'], $values['EMAIL'], $values, TRUE);

  if ($success) {
    $msg = variable_get('mailchimp_subscription_success_message', t('Thank you, you have been successfully subscribed.'));
  }
  else {
    $msg = variable_get('mailchimp_subscription_failure_message', t('We were unable to subscribe you at this time. Please try again later.'));
  }

  drupal_set_message($msg);
}

/**
 * MailChimp unsubscribe form
 *
 * @param <type> $form_values
 * @return <type>
 */
function mailchimp_unsubscribe_form($form_values = array()) {
  $form = array();
  $form['intro'] = array(
      '#type'           => 'markup',
      '#value'          => t('Use this form to unsubscribe from all of our newsletters.'),
  );

  $form['EMAIL'] = array(
      '#type'           => 'textfield',
      '#title'          => t('Email Address'),
  );

  $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Unsubscribe'),
  );
  return $form;
}

/**
 * submit handler for unsubscribe form
 *
 * @param <type> $form
 * @param <type> $form_state
 */
function mailchimp_unsubscribe_form_submit($form, &$form_state) {
  if ($q || $q = _mailchimp_get_api_object()) {
    $success = TRUE;
    foreach ((array)$q->lists() as $list) {
      $success = $success && _mailchimp_unsubscribe_user($list, $form_state['values']['EMAIL'], TRUE, $q);
      if ($success) {
        drupal_set_message(variable_get('mailchimp_unsubscription_success_message', t('Thank you, you have been successfully unsubscribed.')));
      }
      else {
        drupal_set_message(variable_get('mailchimp_unsubscription_failure_message', t('We were unable to unsubscribe you at this time. Please try again later.')));
      }
    }
  }
}

/**
 * validate unsubscribe form
 *
 * @param <type> $form
 * @param <type> $form_state
 */
function mailchimp_unsubscribe_form_validate($form, &$form_state) {
  if (!$form_state['values']['EMAIL']) {
    form_set_error('EMAIL', t('Please enter your email address.'));
  }
  else  {
    if ($q || $q = _mailchimp_get_api_object()) {
      $subscribed = FALSE;
      foreach ((array)$q->lists() as $list) {
        $subscribed = $subscribed || _mailchimp_is_subscribed($list['id'], $form_state['values']['EMAIL'], $q);
      }
      if (!$subscribed) {
        form_set_error('', t('That email address could not be found.'));
      }
    }
    else {
      form_set_error('', t('There was an error processing your request. Please try again later.'));
    }
  }
}

/**
 * Implementation of hook_mailchimp_merge_keys
 */
function mailchimp_mailchimp_merge_keys() {
  $out = array(0 => '<none>');

  $user_fields = array(
      'name'      => t('Username'),
      'mail'      => t('Email Address'),
      'uid'       => t('User ID'),
      'signature' => t("User's Signature"),
      'created'   => t("User's Creation Date"),
      'access'    => t("User's Last Access Date"),
  );

  foreach ($user_fields as $key => $field) {
    $out[$key] = t('User: !field', array('!field' => $field));
  }

  if (function_exists('_profile_get_fields')) {
    $categories = profile_categories();
    if (!empty($categories)) {
      foreach ($categories as $category) {
        $result = _profile_get_fields($category['name'], $register);
        while ($field = db_fetch_object($result)) {
          $out[$field->name] = t('Profile: !cat - !field', array('!cat' => $field->category, '!field' => $field->title));
        }
      }
    }
  }

  if (function_exists('token_get_list')) {
    $tokens = token_get_list(array('user', 'order'));
    if (is_array($tokens['user'])) {
      foreach ($tokens['user'] as $token => $name) {
        $out['token_'. $token] = t('Token: !field', array('!field' => $name));
      }
    }
  }

  return $out;
}

/**
 * Implementation of hook_mailchimp_merge_values
 */
function mailchimp_mailchimp_merge_values($user) {
  $out = array();
  $out = (array)$user;
  foreach ((array)$user as $key => $value) {
    if (is_array($value) && $key != 'role') {
      $out[$key] = implode('/', $value);
    }
    elseif (in_array($key, array('login', 'access', 'created'))) {
      $out[$key] = date('c', $value);
    }
    elseif ($key != 'roles') {
      $out[$key] = $value;
    }
  }
  $out = array_merge($out, _mailchimp_get_user_tokens($user));
  return $out;
}

/**
 * Get the user tokens for merging
 */
function _mailchimp_get_user_tokens($user) {
  $out = array();
  if (function_exists('token_get_values')) {
    $vars = token_get_values('user', $user);
    foreach ($vars->tokens as $key => $value) {
      $out['token_'. $value] = $vars->values[$key];
    }
  }
  return $out;
}


/**
 * Get the available merge var keys
 */
function mailchimp_get_merge_keys() {
  return module_invoke_all('mailchimp_merge_keys');
}

/**
 * Get all the potential merge var values for a given user
 */
function mailchimp_get_merge_values($uid) {
  if ($user = user_load(array('uid' => $uid))) {
    return module_invoke_all('mailchimp_merge_values', $user);
  }
  return array();
}


/**
 * Get the relevent merge vars for the given user for the given list
 */
function _mailchimp_load_user_list_mergevars($uid, $list_id, $mergevars) {
  $account = mailchimp_get_merge_values($uid);
  $lists = unserialize(variable_get('mailchimp_lists', array()));
  $list = $lists[$list_id];

  $uservars = array(
      'EMAIL' => $account['mail']
  );
  foreach ($mergevars as $mergevar) {
    if ($key = $list->mergevars[$mergevar['tag']]) {
      $uservars[$mergevar['tag']] = $account[$key];
    }
  }
  return $uservars;
}

/**
 * Check if the given user is subscribed to the given list
 */
function _mailchimp_is_subscribed($listid, $mail, $q = NULL) {
  $is_subscribed = FALSE;
  if ($q || $q = _mailchimp_get_api_object()) {
    $sub_info       = $q->listMemberInfo($listid, $mail);
    $is_subscribed  = @$sub_info['status'] == 'subscribed';
  }
  return $is_subscribed;
}

/**
 * Subscribe or update a user in a givne list
 */
function _mailchimp_subscribe_user($list, $email, $merge_vars, $message = TRUE, $q = NULL) {
  if ($q || $q = _mailchimp_get_api_object()) {
    $double_optin   = $list->doublein;

    if (_mailchimp_is_subscribed($list->id, $email, $q)) {
      $action = 'updated in';
      $success = $q->listUpdateMember($list->id, $email, $merge_vars);
      if($success && $message){
        drupal_set_message(t('You have updated your settings in %list.', array('%list' => $list->name)));
      }
    }
    else {
      $action = 'subscribed to';
      $success = $q->listSubscribe($list->id, $email, $merge_vars, 'html', $double_optin, TRUE);

      if ($message && $success && $double_optin) {
        drupal_set_message(t('You have chosen to subscribe to %list. An email will be sent to your address. Click the link in the email to confirm the subscription.', array('%list' => $list->name)));
      }
      else if ($message && $success) {
          drupal_set_message(t('You have subscribed to %list.', array('%list' => $list->name)));
        }
    }
  }

  if ($success) {
    watchdog('mailchimp', '@email was @action list @list.',
      array('@action' => $action, '@email' => $merge_vars['EMAIL'], '@list' => $list->name), WATCHDOG_NOTICE);
  }
  else {
    watchdog('mailchimp', '@email has failed to subscribed to @list.', array('@email' => $merge_vars['EMAIL'], '@list' => $list->name), WATCHDOG_WARNING);
  }

  return $success;
}

/**
 * Unsubscribe the given user from the given list
 */
function _mailchimp_unsubscribe_user($list, $mail, $message = TRUE, $q = NULL) {
  if ($q || $q = _mailchimp_get_api_object()) {
    if (_mailchimp_is_subscribed($list->id, $mail, $q)) {
      $success = $q->listUnsubscribe($list->id, $mail, FALSE, FALSE, FALSE);
      if ($message && $success) {
        drupal_set_message(t('You have unsubscribed from %list.', array('%list' => $list->name)));
      }
    }
  }
  return TRUE;//$success; // the mailchim api seems to always return FALSE on unsubscribe operations
}

/**
 * Get all of the lists that the given user can subscribe to
 */
function _mailchimp_get_available_lists($user) {
  $all_lists = variable_get('mailchimp_lists', array());
  $available_lists = array();
  if (!empty($all_lists)) {
    $all_lists = unserialize($all_lists);
    foreach ($all_lists as $key => $list) {
      foreach ((array)$user->roles as $rid => $info) {
        if ($list->roles[$rid]) {
          $available_lists[] = $list;
          break;
        }
      }
    }
  }

  return $available_lists;
}

/**
 * Get all of the lists that the given user must be subscribed to
 */
function _mailchimp_get_required_lists() {
  $data = variable_get('mailchimp_lists', NULL);
  $lists = array();
  if (!empty($data)) {
    $lists = unserialize($data);
    foreach ($lists as $key => $list) {
      if ($list->listtype !== MAILCHIMP_LISTTYPE_REQUIRED) {
        unset($lists[$key]);
      }
    }
  }
  return $lists;
}

/**
 * Get a Mailchimp API object for communication with the mailchimp server
 */
function _mailchimp_get_api_object() {
  module_load_include('php', 'mailchimp', 'MCAPI.class');

  $q = new MCAPI(variable_get('mailchimp_username', ''), variable_get('mailchimp_password', ''));
  if ($q->errorCode) {
    watchdog('mailchimp', $q->errorMessage, array(), WATCHDOG_ERROR);
    return NULL;
  }
  return $q;
}

/**
 * implementation of hook_block
 * @todo: provide a block for each individual list
 */
function mailchimp_block($op='list', $delta=0) {
  if ($op == "list") {
    $block[0]["info"] = t("Mailchimp Subscription Form");
  }
  else if ($op == 'view') {
    // don't show on the subscription page to avoid conflicts
    if($_GET['q'] != 'mailchimp/subscribe' && stripos($_GET['q'], 'user/') === false){
      global $user;
      $ret = '';
      $subject = t('Newsletter signup');
      if($user->uid){
        $ret = drupal_get_form('mailchimp_subscribe_auth_form', $user);
      }
      else{
        if ($q = _mailchimp_get_api_object()) {
          $lists =_mailchimp_get_available_lists($user);
          $count = count($lists);
          foreach ($lists as $list) {
            // if more than one newsletter, add a title to separate them
            $title = '';
            if($count > 1){
              $title = '<h3 class="mailchimp-list-title">'. $list->name .'</h3>';
            }
            $ret .= drupal_get_form('mailchimp_subscribe_anon_form', $list, $q);
          }
          // if only single newsletter, set block title to its name
          if($count == 1){
            $subject = t('Subscribe to the @title newsletter', array('@title' => $list->name));
          }
        }
      }
      $block['subject'] = $subject;
      $block['content'] = $ret;
    }
  }
  return $block;
}
